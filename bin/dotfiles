#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

ARROW="ï¿«"
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'

# Get dotfiles dir (so run this script from anywhere)
export DOTFILES_DIR EXTRA_DIR
DOTFILES_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

sub_help () {
    echo -e "$ARROW Usage: ${YELLOW}$BIN_NAME <command>${NC}"
    echo
    echo "Commands:"
    echo "   help             This help message"
    echo "   update           Update packages and pkg managers (OS, brew, node, npm, yarn, commposer)"
    echo "   clean            Clean up caches (brew, npm, yarn, composer)"
    echo "   backup           Run backup script"
    echo "   symlinks         Run symlinks script"
    echo "   brew             Run brew script"
#    echo "   ohmyzsh          Run oh my zsh script"
    echo "   hosts            Run hosts script"
    echo "   macos            Run MacOS defaults script"
    echo "   dock             Run MacOS dock script"
    echo "   java             Run java script"
    echo "   javascript       Run javascript script"
    echo "   python           Run python script"
}

sub_update () {
    sudo softwareupdate -i -a
    sudo n lts # install last lts node instance
    brew update
    brew upgrade
    echo -e "${GREEN}$ARROW Success! Update command finished.${NC}"
}

sub_clean () {
    brew cleanup
    brew cask cleanup
    npm cache clean --force
    echo -e "${GREEN}$ARROW Success! Clean command finished.${NC}"
}

sub_backup () {
    source "$DOTFILES_DIR/install/backup.sh"
    echo -e "${GREEN}$ARROW Success! Backup command finished.${NC}"
}

sub_symlinks () {
    source "$DOTFILES_DIR/install/symlinks.sh"
    echo -e "${GREEN}$ARROW Success! Symlinks command finished.${NC}"
}

sub_brew () {
    source "$DOTFILES_DIR/install/brew.sh"
    echo -e "${GREEN}$ARROW Success! Brew command finished.${NC}"
}

# sub_ohmyzsh () {
#     source "$DOTFILES_DIR/install/oh-my-zsh.sh"
#     echo -e "${GREEN}$ARROW Success! Oh my zsh command finished.${NC}"
# }

sub_hosts () {
    source "$DOTFILES_DIR/install/hosts.sh"
    echo -e "${GREEN}$ARROW Success! Hosts command finished.${NC}"
}

sub_defaults () {
    source "$DOTFILES_DIR/install/macos.sh"
    echo -e "${GREEN}$ARROW Success! MacOS defaults command finished.${NC}"
}

sub_dock () {
    source "$DOTFILES_DIR/install/dock.sh"
    echo -e "${GREEN}$ARROW Success! MacOS dock command finished.${NC}"
}

sub_java () {
    source "$DOTFILES_DIR/install/java.sh"
    echo -e "${GREEN}$ARROW Success! Java command finished.${NC}"
}

sub_javascript () {

}

case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${COMMAND_NAME} $@
        if [ $? = 127 ]; then
            echo -e "${RED}$ARROW Error: '$COMMAND_NAME' is not a known command or has errors.${NC}" >&2
            sub_help
            exit 1
        fi
        ;;
esac
